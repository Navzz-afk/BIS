import random

items = [
    (60, 10),   
    (100, 20),  
    (120, 30),  
    (80, 15),   
    (30, 5)     
]

max_weight = 50
population_size = 10
generations = 100
mutation_rate = 0.1
tournament_size = 3



def generate_chromosome(length):
    return [random.randint(0, 1) for _ in range(length)]

def fitness(chromosome):
    total_value = 0
    total_weight = 0
    for gene, (value, weight) in zip(chromosome, items):
        if gene:
            total_value += value
            total_weight += weight
    return total_value if total_weight <= max_weight else 0

def selection(population):
    contenders = random.sample(population, tournament_size)
    return max(contenders, key=fitness)

def crossover(parent1, parent2):
    point = random.randint(1, len(parent1) - 1)
    return (
        parent1[:point] + parent2[point:],
        parent2[:point] + parent1[point:]
    )

def mutate(chromosome):
    return [gene if random.random() > mutation_rate else 1 - gene for gene in chromosome]

def run_genetic_algorithm():
    
    print("0/1 Knapsack Problem Setup")
    print(f"Maximum Knapsack Weight: {max_weight}")
    print("Items (index: value, weight):")
    for idx, (value, weight) in enumerate(items):
        print(f"  Item {idx}: Value = {value}, Weight = {weight}")
    print("-" * 40)

    # Initial population
    population = [generate_chromosome(len(items)) for _ in range(population_size)]

    for generation in range(generations):
        new_population = []

        while len(new_population) < population_size:
            parent1 = selection(population)
            parent2 = selection(population)
            child1, child2 = crossover(parent1, parent2)
            new_population.append(mutate(child1))
            if len(new_population) < population_size:
                new_population.append(mutate(child2))

        population = new_population
        best = max(population, key=fitness)
        print(f"Generation {generation + 1}: Best Fitness = {fitness(best)}")

    # Final best solution
    best = max(population, key=fitness)
    print("\n🏆 Best Solution Found:")
    print("Chromosome:", best)
    print("Total Value:", fitness(best))
    total_weight = sum(weight for gene, (_, weight) in zip(best, items) if gene)
    print("Total Weight:", total_weight)




if __name__ == "__main__":
    run_genetic_algorithm()
