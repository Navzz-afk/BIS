import random
import math

# Step 1: Define the problem (cities and coordinates)
cities = {
    0: (0, 0),
    1: (1, 5),
    2: (5, 2),
    3: (6, 6),
    4: (8, 3),
    5: (7, 9),
}

def euclidean_distance(a, b):
    return math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)

city_indices = list(cities.keys())
num_cities = len(city_indices)

# Distance matrix
distances = [[euclidean_distance(cities[i], cities[j]) for j in city_indices] for i in city_indices]

# Step 2: Initialize parameters
num_ants = 10
num_iterations = 100
alpha = 1      # pheromone importance
beta = 5       # heuristic importance
rho = 0.5      # evaporation rate
pheromone_initial = 1.0
Q = 100        # constant for pheromone deposit


pheromone = [[pheromone_initial for j in city_indices] for i in city_indices]


def tour_length(tour):
    return sum(distances[tour[i]][tour[i + 1]] for i in range(num_cities - 1)) + distances[tour[-1]][tour[0]]

# Step 3: Construct Solutions
def select_next_city(ant_path, current_city):
    probabilities = []
    for next_city in city_indices:
        if next_city not in ant_path:
            tau = pheromone[current_city][next_city] ** alpha
            eta = (1 / distances[current_city][next_city]) ** beta
            probabilities.append((next_city, tau * eta))
    total = sum(prob for _, prob in probabilities)
    if total == 0:
        return random.choice([c for c in city_indices if c not in ant_path])
    r = random.uniform(0, total)
    cumulative = 0.0
    for city, prob in probabilities:
        cumulative += prob
        if r <= cumulative:
            return city
    return probabilities[-1][0]

# Step 6: Track the best solution
best_tour = None
best_length = float('inf')

# Step 5: Iterate
for iteration in range(num_iterations):
    all_tours = []
    for ant in range(num_ants):
        start = random.choice(city_indices)
        tour = [start]
        while len(tour) < num_cities:
            next_city = select_next_city(tour, tour[-1])
            tour.append(next_city)
        all_tours.append(tour)

    # Step 4: Update pheromones
    # Evaporation
    for i in city_indices:
        for j in city_indices:
            pheromone[i][j] *= (1 - rho)

    # Deposit
    for tour in all_tours:
        length = tour_length(tour)
        for i in range(num_cities):
            from_city = tour[i]
            to_city = tour[(i + 1) % num_cities]
            pheromone[from_city][to_city] += Q / length
            pheromone[to_city][from_city] += Q / length  

        # Track best
        if length < best_length:
            best_length = length
            best_tour = tour

# Step 6: Output
print("Best tour found:")
print(" -> ".join(str(city) for city in best_tour + [best_tour[0]]))
print(f"Total distance: {best_length:.2f}")
